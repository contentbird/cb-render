/* ================== rotate ================== */
@mixin rotate($degrees) {
	-moz-transform: rotate($degrees); 
	-o-transform: rotate($degrees); 
	-webkit-transform: rotate($degrees);
	-ms-filter: "progid:DXImageTransform.Microsoft.Matrix(sizingMethod='auto expand', M11=#{cos($degrees)}, M12=-#{sin($degrees)}, M21=#{sin($degrees)}, M22=#{cos($degrees)})";
	zoom: 1;
}
 
/* ================== rounded borders ================== */
@mixin roundedBorders($rounding: 4px) {
	-moz-border-radius: $rounding $rounding;
	-webkit-border-radius: $rounding $rounding;
	-khtml-border-radius: $rounding $rounding;
	-o-border-radius: $rounding $rounding;
	border-radius: $rounding $rounding;
}

/* ================== shadow ================== */
@mixin shadow( $off-y, $off-x, $blur, $color){
	  -moz-box-shadow: $off-y $off-x $blur $color; 
  -webkit-box-shadow:  $off-y $off-x $blur $color; 
          box-shadow:  $off-y $off-x $blur $color;
}

/* ================== background image cover ================== */
@mixin cover($url) {
	background-image: image-url($url);
	background-position: center;
	-webkit-background-size: cover;
	-moz-background-size: cover;
	-o-background-size: cover;
	background-size: cover;
	@media (max-width: 1024px) {
        background-attachment: scroll;
    }
}

/* ================== mobilefirst breakpoints ================== */
$medium: 40.063em;
$large: 64em;

@mixin bp($point) {
    @if $point == medium {
        @media only screen and (min-width: $medium)  { @content; }
    }
    @else if $point == large {
        @media only screen and (min-width: $large) { @content; }
    }
}

/* ================== calculate rems ================== */
@function calculateRem($size) {
  $remSize: $size / 16px;
//Default font size on html element is 100%, equivalent to 16px;
  @return #{$remSize}rem;
}

@mixin fontSize($size) {
  font-size: $size;
  font-size: calculateRem($size);
}